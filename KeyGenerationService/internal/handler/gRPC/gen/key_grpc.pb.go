// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: key.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KeyGenerationService_GetKeyMetadata_FullMethodName = "/KeyGenerationService/GetKeyMetadata"
)

// KeyGenerationServiceClient is the client API for KeyGenerationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeyGenerationServiceClient interface {
	GetKeyMetadata(ctx context.Context, in *GetKeyMetadataRequest, opts ...grpc.CallOption) (*GetKeyMetadataResponse, error)
}

type keyGenerationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyGenerationServiceClient(cc grpc.ClientConnInterface) KeyGenerationServiceClient {
	return &keyGenerationServiceClient{cc}
}

func (c *keyGenerationServiceClient) GetKeyMetadata(ctx context.Context, in *GetKeyMetadataRequest, opts ...grpc.CallOption) (*GetKeyMetadataResponse, error) {
	out := new(GetKeyMetadataResponse)
	err := c.cc.Invoke(ctx, KeyGenerationService_GetKeyMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyGenerationServiceServer is the server API for KeyGenerationService service.
// All implementations must embed UnimplementedKeyGenerationServiceServer
// for forward compatibility
type KeyGenerationServiceServer interface {
	GetKeyMetadata(context.Context, *GetKeyMetadataRequest) (*GetKeyMetadataResponse, error)
	mustEmbedUnimplementedKeyGenerationServiceServer()
}

// UnimplementedKeyGenerationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKeyGenerationServiceServer struct {
}

func (UnimplementedKeyGenerationServiceServer) GetKeyMetadata(context.Context, *GetKeyMetadataRequest) (*GetKeyMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeyMetadata not implemented")
}
func (UnimplementedKeyGenerationServiceServer) mustEmbedUnimplementedKeyGenerationServiceServer() {}

// UnsafeKeyGenerationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyGenerationServiceServer will
// result in compilation errors.
type UnsafeKeyGenerationServiceServer interface {
	mustEmbedUnimplementedKeyGenerationServiceServer()
}

func RegisterKeyGenerationServiceServer(s grpc.ServiceRegistrar, srv KeyGenerationServiceServer) {
	s.RegisterService(&KeyGenerationService_ServiceDesc, srv)
}

func _KeyGenerationService_GetKeyMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyGenerationServiceServer).GetKeyMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeyGenerationService_GetKeyMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyGenerationServiceServer).GetKeyMetadata(ctx, req.(*GetKeyMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyGenerationService_ServiceDesc is the grpc.ServiceDesc for KeyGenerationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyGenerationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "KeyGenerationService",
	HandlerType: (*KeyGenerationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKeyMetadata",
			Handler:    _KeyGenerationService_GetKeyMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "key.proto",
}
